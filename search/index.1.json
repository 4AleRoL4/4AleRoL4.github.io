[{"authors":[{"title":"（要饭的）可怜大猫猫","url":"/authors/yfdkldmm/"}],"categories":[],"content":"这里是由（要饭的）可怜大猫猫自己搭建的网站，用于分享本人（或者以后也有别的人）发布的包括但不限于： blog，小说，midi，小知识等东西。 更多详情，请点击右方“关于我”，或者点击右方“作者”对应标签查看。\n","date":"2023年4月29日","img":"https://4AleRoL4.github.io/images/index.png","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/blog/2023/04/readme/","series":[{"title":"blog","url":"/series/blog/"}],"smallImg":"","tags":[{"title":"README","url":"/tags/readme/"}],"timestamp":1682783145,"title":"README"},{"authors":[{"title":"（要饭的）可怜大猫猫","url":"/authors/yfdkldmm/"}],"categories":[{"title":"教程","url":"/categories/%E6%95%99%E7%A8%8B/"}],"content":"前言 这部分会非常碎片，因为每一个要更改的部分，基本都互不相关。然后又因为主题作者给的指南，是按照文件类型分类的，所以每一次的更改导致网页变化的位置是不一样的，可能会东一块西一块。最后我是一边根据文件顺序改好内容，一边来写文档的，所以一开始的顺序也会跟文件顺序同步，并且只会优先修改真正需要的，多余的参数等以后有空了才会尝试并补上（最后也许会整合一下，给个清单？）\n配置文件修改 配置总览 首先是整个配置文件的目录结构，和大体的作用。这一段内容在指南里面有，我就不再赘述。需要关注的一个总览是站点配置，这里面有大致的配置文件内容，方便导航。 另外一点就是，可以使用hugo server一下，这样方便你更改了配置文件或其他东西以后实时查看更改内容，通过这一点，你其实也可以自己一点一点改文件，然后摸索什么文件具体管什么内容的（就是真的很麻烦）\nauthor.yaml 是作者小工具的配置，我就直接给出更改以后的效果吧\n可以看出来，author.yml文件差不多就是更改这个地方的东西。界面的变化，可以自己根据给出的图片对照着自己原本的模板查看，再下面也就讲解一下比较特殊一点的。 company和location，这俩因为个人原因，我没改。要说的点就是，后面的注释给了可以使用链接，格式也给出了，想设置的可以自己设置。 中间有一行about被注释了，但是在网页中依然有。当被注释时，会有一个默认值，跳转到默认已有的about页面下。你依旧可以自己设置链接跳转。 params\u0026hellip;\u0026hellip;只有一个参数，将#去掉然后保存就可以自己看到效果了，如下\n（我是不喜欢这个布局） 最后是social，可以看到我的twitter和paypal不在了，取而代之的是qq和bilibili。这部分是可以根据需求自己增删的，对应的表在社交链接里可以查看，或者看我下面的对应表。\n参数 平台 email 电子邮箱 facebook facebook个人地址 facebookgroup facebook群组地址 github github地址 gitlab gitlab地址 instagram Instagram个人地址 itchio itch.io个人地址 quora quora个人地址 stackoverflow StackOverflow个人地址 tumblr tumblr个人地址 twitter twitter个人地址 weibo 微博个人地址 zhihu 知乎个人地址 reddit reddit个人地址 telegram 电报个人地址 qq 个人QQ号 docker docker hub个人地址 bitbucket bitbucket workspace个人地址 kaggle kaggle个人地址 medium Medium 用户名或自定义域名（比如：https://yfd.kldmm.icu） lastfm last.fm个人地址 bilibili B站个人地址 youtube YouTube个人地址 discord discord邀请码 discourse 论坛地址 tiktok 抖音个人地址 pinterest Pinterest个人地址 mastodon mastodon个人地址 liberapay liberapay个人地址 paypal PayPal个人地址 tipeee tipeee个人地址 rss 空字符串禁用RSS链接 website 网站地址 patreon 红P个人地址 总共有这么一大长串的链接，（而且还可能漏了一些，因为我就发现指南里面，漏了红P的）。实际上也基本用不到这么多，很多网站对于国内来说，并不流通，对此，你也可以试着将不需要的删了。\nconfig.yaml 这个是一个比较核心的配置文件，里面有些东西要是一不小心修改，就会\u0026hellip;\u0026hellip;所以建议随时准备回档。同时，这个每一项的更改导致界面结果，是完全分散的，就没法一个图囊括。\nbaseURL 这个应该没有必要修改（我也没找出来具体有什么用）\ntitle 直接上图\n主要体现在，你头顶浏览器显示的内容，以及你blog页面最下面一排白色的字\ntheme 这个是加载主题，所给的url是指向主题原仓库，不能更改（你可以自己试试）\ncopyright 其实就是显示在blog页面最下面的那一行灰色的字，代表许可，就不单独给出图片查看了\ndefaultContentLanguage 就是设置页面的默认语言。下面给出一个图，可对应查询\n其中，简体中文需要使用zh-hans，使用zh-cn会报错，应该是后来改了\nhasCJKLanguage 注释中说明了如果包含后面几个语言，就需要把这个的注释取消掉。\n再往后的几个配置，暂且来说应该是没有必要的，先跳过吧。\nconfig.zh-hans.yaml 这个就是对应中文的config配置，里面也只有两个东西，不讲了\nlanguages.yaml 默认的有两个模板，一个是en，另一个是中文。并且是可以自己再添加语言上去的，按照他的模板来就可以。不过，英语+中文，对一般人来说足够了，就保持这样也差不多\nmenu.en.yaml and menu.zh-hans.yaml 这俩很明显是一对，所以一起讲。 点进去会发现，其实参数完全一致，并且只有一个，对应的就是网站最上方那一排\n文档的那一个按钮。默认给的跳转链接是主题作者的，你可以将其名字以及url改成自己的（暂时没想法，也可以直接将url删除或者填写自己网站的url，这样是跳转自己网站的主页面）\nparams.yaml 这是一个重头戏了，点开一看，里面一大堆的东西，还有一堆的注释，看起来就头疼。我这里也不可能把每一个对应的东西都说完，顶多后续更新会慢慢补充。 mainSections 这个内容，体现在主页面中央，可以自己删了试试。具体参数除了默认三个以外，还有，notes\nbrand 这个参数修改的就是左上角那一串文字，很明显，不给图了\npinnedPost 这个是控制是否允许置顶文章的，在其下面一行的count参数，就是最多置顶文章数\ngiscus and utterances 在一开始的教程中有说，如果想要开启评论区评论并且与github关联的话，就需要将这两个其中一个开启。 首先是这俩里面的参数repo，填写自己网站的仓库名。然后giscus的上面有一个链接，指向giscus的使用教程，有简体中文，而且只有三步，点几下就完了，所以也不再说了\nreward 这个就是给网站添加赞助小工具的配置。给了图片位置，也就是网站根目录\\images\\reward\\图片名，自己放进去吧\ntopAppBar 底下有一个很熟悉的，social列表，跟上面配置的一样，social链接，可自主增删改\n这里面还有非常多的参数，但是可能一开始还用不上，所以跳转到下一个吧\nserver.yaml 这个文件里，看起来似乎跟自主化没有太大关联，下一个吧~\nsocial.yaml 好了，最后一个了。 这个是最底下的一排一排的那些社交链接，跟之前设置的一样，不需要的删了，需要的自己改链接即可 （想自己添加别的社交链接来着，但是\u0026hellip;\u0026hellip;还根本看不懂这该如何添加，以后再说吧）\n相关图片的修改 文字什么的，还有部件什么的，都差不多改完了，但是图片还是他默认的，这可也得改了。 首先是最上方浏览器左边的小图标，这个的目录是在根目录\\assets里面，名为favicon.webp的文件，可以选择自己想要的图片直接覆盖，或者重命名为favicon.png也可以，但是webp优先级大于png，总之，替换了准没错。 其次是，根目录\\static\\images里面的两个文件，和之前一样改成同名文件即可，最后记得去根目录\\resources\\_gen\\images下面，删一下原本有的图片就可以了，记得要清理浏览器缓存，要不然图片是看不到更改的。\n文章位置以及对应参数 改完上面的，那么基本的上下左右什么的东西，都算是属于自己的内容了。但是中间的部分，一个blog最重要的部分，就是文章，这部分的话，又是一个大块内容。 首先，在根目录\\content\\文件夹里面，放着好几个文件夹，这些文件夹就是存放每一个文档的位置，不过有些文件夹并不需要动（也最好别动） 接着，我们来细细看一下每一个文件内容（暂时不做改动），整个目录如下所示\n其中，需要关注的，就是about，authors，blog，docs，news这几个文件夹。分别点进去看，都能看到有，要么是index文档，要么是文件夹+文档，文件夹里面还有文档。 看完了大致目录以后，可以都点开md文档来看看，包括其他没有说到的文件夹，也可以尝试自己改改，看看有什么变化，只是另外几个变化不如这几个来得直接。 顺带一提，这些文档命名里面大致可以看出来，是用文件夹名来区分，然后md文档名统一为\u0026rsquo;index.md\u0026rsquo;（英文文档）或者\u0026rsquo;index.zh-hans.md\u0026rsquo;（中文简体文档），指南给出的生成示例，也是如此。 接下来就分文件夹来讲讲吧\nabout 这个是之前在配置中，有个“关于我”的位置的一个文档，就在作者小工具那边，点一下就会跳转到about目录下的一个md文档，那么现在就可以在那里面改写正文内容了。\nauthors 这个是基于网站默认的可以根据作者进行分类的功能而专门分出来的一个文件夹，具体进入位置是在右边作者小工具下面作者里面，将里面的md文档改成自己的，还有图片也改成自己的就行。 另外支持额外创建文件夹来说明其他的作者（不过这样子，不算多吧？）\ndocs, news, blog 这些都是作为主要创作内容的文件夹，我们创作的md文档就是根据需要放在这里面的。 先说说news吧，点进去以后，有两个文档，一个文件夹。这两个文档，其实是关于网页上方那一排字，可以自己改改title看看，包括docs和blog也是这样。 接下来看文件夹。首先文件夹的命名，和网站上的一个文章一致，点进去发现只有index，通过改一改md文档内容，可以发现很多新的参数，这些参数基本都是通用的。 顺带一提，HBS主题支持自动根据标题等级给出序号，并给出目录跳转，所以如果需要写序号的话，直接使用标题就可以了，还能多一个界面跳转\nfeatured 判断是否为精选文章，在右边作者小工具下面\ndraft 判断是否为草稿，默认的hugo和hugo server都是不包含构建草稿的，养成好习惯，准备发布了就把draft改成false，要不然就自己加-D参数（到时候把所有的草稿全都发布上去喽）\ncomment 就是用来判断是否开启评论功能的。\nreward 是用来判断是否开启赞助，上面在params中也有说。这个体现在点进文章以后，屏幕下方会有一个浮动小窗口，里面就有赞助的按钮。不过没有预设图，需要我们自己把我们的图片放进去。具体使用就在上面，仔细看的人是不会错过的。\npinned 这个是用来判断是否置顶，而最多置顶的数目，也在params中设置。\ncarousel 这个是判断是否加入顶部滚动播放，可以自己打开多个文件，分别修改为true或者false来看看效果，很明显的 注意，如果启用这个，那么就不要在文章使用二级标题，会出现很奇怪的错误，至少hugo server上面是这样。包括排版也是需要额外注意（所以应该只适合拿来给README等纯介绍性的文档使用了吧）\nseries，categories，tags，authors 这几个都是对文章进行分类的，当你按照格式对此进行修改时，就会发现打的标签什么的，就会多出来。对应的，在右边作者小工具下边，那一排的分类什么的，也会将标签提供上去（不过，需要重新hugo server一下，要不然你点标签是跳转不过去的）\nimages 这个标签是将所给的图片地址的图片，放进文章里，而且似乎只接受一个文件。当为空时，则默认使用该文档下的同路径里的图片，图片名不检索（至于多个图片会怎么选取\u0026hellip;\u0026hellip;自己试试吧），如果提供路径，则是优先使用给的路径图片。 顺便说一下图片路径，默认的图片路径根目录，是在网站根目录的static文件夹里。\n例如我这里的路径，那么对应的路径就该填写\u0026lt;/images/文件名\u0026gt;\n只不过有一个怪的地方就是，我用news目录下的默认md文档测试，但是用blog下的readme文档，就无法检测，只能使用路径，具体原因不明。\n总共常用的标签就是这些，这些搞定了，那么最基础的部分，都学会了，后面的都是一些别的内容了，下一个blog再见\n总结 这个主题给的功能很多，所以导致设置等东西，都要花很久。不过艰苦的设置以后换来的，就是满意的（其实也还有一点点不满意），一个属于自己的网站，踏出这一步以后，后面的都会变得简单许多（真的吗？）\n","date":"2023年4月29日","img":"https://4AleRoL4.github.io/images/%E5%BC%80%E5%A7%8B%E8%AE%A9%E7%BD%91%E7%AB%99%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E7%9A%84%E6%A0%B7%E5%AD%90%E5%90%A7/index.png","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/blog/2023/04/%E5%BC%80%E5%A7%8B%E8%AE%A9%E7%BD%91%E7%AB%99%E5%8F%98%E6%88%90%E8%87%AA%E5%B7%B1%E6%83%B3%E8%A6%81%E7%9A%84%E6%A0%B7%E5%AD%90%E5%90%A7/","series":[{"title":"blog","url":"/series/blog/"}],"smallImg":"","tags":[{"title":"Hugo","url":"/tags/hugo/"}],"timestamp":1682780805,"title":"开始让网站变成自己想要的样子吧"},{"authors":[{"title":"（要饭的）可怜大猫猫","url":"/authors/yfdkldmm/"}],"categories":[{"title":"教程","url":"/categories/%E6%95%99%E7%A8%8B/"}],"content":"首先确立blog框架 我使用的是Hugo框架来搭建blog，需要安装Go语言以及Git。\n安装步骤 首先Hugo有自带的安装步骤，按照那上面一步一步来。 我先是选择了Build from source，从源代码搭建（然后失败，留档视为耻辱，我正确安装的方式在第三条）。 安装Go，然后添加环境变量，最后打开cmd，输入以下代码\ngo version 出现下图类似的版本编号，即Go环境变量配置完成\n之后返回Hugo，按照步骤该执行以下代码\ngo install -tags extended github.com/gohugoio/hugo@latest 我出现了如下错误\n之后再在下面打一行\ngo env -w GOPROXY=https://goproxy.cn 之后再次输入上面的代码，之后冒出来一大串，等待安装完成就行\n直接使用包管理工具安装 hugo是给了三个办法，我选择了Scoop 在安装Scoop前，需要PowerShell，正好hugo运行也需要PowerShell，所以就直接安装了吧，直通地址，然后在PowerShell中输入\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser 再输入\nirm get.scoop.sh | iex 因为网络问题，可能会出现图下状况\n我自己是因为网络，无法连接，重复执行一两次以后，就成功了\n之后再根据hugo给的代码，通过scoop安装hugo\nscoop install hugo-extended 安装完成就如下图\n最后打一行代码看看是否真的成功\n创建本地网站（本大标题废弃，留作耻辱，真正部署成功步骤在下一个标题） 首先，在Hugo教程步骤上明确说明，不要使用cmd，也不要使用Windows PowerShell，而是要PowerShell（和Windows PowerShell是两回事），看到这肯定已经安装好了\n在powershell中cd到你要安装的目录下，开始按照网站给的代码一行一行输入\nhugo new site quickstart cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke echo \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; config.toml hugo server 一行一行地输入后，没有任何报错，就会有下图\n在第二行能找到localhost:端口号，将这串网站在自己浏览器打开，就会有一个默认的blog界面\n很普通，但至少说明网站框架有了。接下来按Ctrl+C停止服务，以便于后续的更改。\n开始正式增加blog 尽管界面还很简略，但是已经可以作为一个blog开始发布md文档，那下面就是一些基础的操作 先别管别的，直接执行下面的代码\nhugo new posts/my-first-post.md 然后，下一行代码\nhugo service -D 当你再次去查看网页并刷新时，就会发现多出个内容\n那么很显然，这就是我们刚刚使用默认模板直接创建的一个md文档，并且网站实时更新出来了。 既然到了这一步，就可以开始正式开始尝试将我们自己的md文档放在网站上了。\nmd文档放在哪 首先根据我之前按照给出的命令行执行的内容，以及我自己更改的目录结构，最后我的blog网站项目是在D:\\blog\\quickstart的目录下，以后要启动项目，也得先cd到这个目录下才行。 接着，自己打开目录，会发现里面有很多的文件夹。 别的暂且不用管，专注于content文件夹，点进去，会有posts文件夹，再点进去，就会发现我们之前默认生成的一个md文档，文件名为：my-first-posts。 所以很明显，md文档放在主目录/content/posts/目录下，就会被网站识别上传（也许会有别的办法更改目录什么的，总之先这样好了）\n编写md文档 呃，首先是想确认一下，如果你真的md文档什么都不会的话，可以点这里，然后看着那教程来编写，需要用到的也不多，就是标题，正文，代码块，列表，链接，图片，这些就足够了，同时推荐vsc的一个小插件，名叫Markdown Preview Enhanced，这个可以在vsc中编写md文档并且实时预览，安装好以后在md文档里面右键，在菜单栏下面找到MPE:打开侧边预览，或者快捷键，先Ctrl+K，再按下V md文档基础相关就到这，接下来是hugo相关的基础东西 首先打开生成的默认模板\n可以发现与普通md文档不同的是，没有一级标题，取而代之是\u0026mdash;括起来的一块区域。 在这一块当中，就是hugo给出的一个默认的front matter，分别是三个属性（而且还有更多参数），具体内容可以自己查阅hugo网站，我就直接以实用方式开说了。\ntitle title顾名思义，就是标题，在这里的作用，其实就是替代了一级标题，所以不需要我们自己再去创建一级标题，正文直接从二级标题开始即可。同时，这个一级标题也会体现在blog总览界面，所以功能比一级标题多一点\ndate date就是blog的发布日期，具体写哪天，可以自己琢磨，格式也就是YYYY-MM-DDTHH:MM:SSZ（标准的RFC 3339格式），通俗点就是，直接使用UTC时间来标注\ndraft draft（草稿），其值只有true或false（或者直接删除）。在生成静态网页的时候，如果是不带任何参数的hugo service，那么在本地预览的时候，是会忽略掉拥有draft=true的md文档的。而在后面加了-D参数，表示也要将标记为draft（草稿）的md文档加入预览中。具体如何使用这个参数，就自己去思考吧。 同时，和draft作用相似的，还有date（当设置的时间为未来时），publishDate（当设置的时间为未来时），expiryDate（当设置的时间为过去时），这三个以后再说。 总之就是，要么发布时记得把draft删掉或false，要么就是启动的时候加上\u0026ndash;buildDrafts参数\n发布网站 上面都做好了，那么就该最后一步了，将网站发布出去。 首先，按照步骤，需要去根目录中找到config.toml，来编辑一些东西\nbaseURL里面就填写你的地址，如果还没有在github pages里面配置域名的话，那这个地方就是填写的是待会儿在github pages那个仓库的名字。languageCode就是语言+国家缩写，title的话，其实就是默认页面上面，那一排大大的字。最后的theme明显就是网站的那个主题模板，在正式开始美化前，先暂时不管吧 然后呢，就是去github创建仓库，并且命名为username.github.io，username就是你github的名字，比如我github名为4AleRoL4，那么就该写\u0026quot;4AleRoL4.github.io\u0026quot;，创建过程中要不要创建md文件看个人。 创建好以后，点setting→pages，然后build and deployment下，source选择github actions，那么在github上的配置就完成了。最后是记得去Code→绿色图标的code那边，将local下的https地址复制一下，后面使用git会用。 之后就是按着hugo教程来（因为我在使用这个方法的时候失败了，怎么也解决不了气得我第二天直接换了一个底子，部署和配置什么的，都不一样，所以这边就没法说的很详细）。 遇到的问题可以稍微说一下，教程中所说的创建.github/workflows/什么的.yaml文件，应该是创建在hugo server的目录下，而不是在hugo以后出现的public文件夹内，上传的时候是在quickstart目录下，进行上传。或者说\u0026hellip;\u0026hellip;请~，这篇blog写得还不错，我没说到的细节也可以在这里得到补充，只可惜我跟ta的步骤几乎颠倒，也没办法再回头，索性不如，全部重头来\n重新开始 这部分我觉得，应该没有多少参考性了，因为我使用的theme的安装方式有点奇特，是从github直接复制工程下来，再自己更改好以后上传到自己的仓库里，不需要hugo new site，也不需要自己创建yaml东西，所以跟前面的步骤，相当于是跨了很大一截（然后出现更奇怪的错误），作为记录，我还是稍微记一下\n克隆文件 先贴一下我使用的HBS主站，然后在下方的介绍界面会找到，或者直接点击HBS新手模板，在这个github页面下，就是我们需要复制下来的仓库。 在这个页面下的md文档也有说如何操作，我就稍微讲一讲。 第一步，自己创建以\u0026quot;username.github.io\u0026quot;命名的仓库，username替换为自己的github名字，我这里就是4AleRoL4。默认选项里的话，可以选择不添加md文档（反正最后是要改的），我是添加了md文档。 创建好以后，就可以回到本地，然后输入\ngit clone https://github.com/razonyang/hugo-theme-bootstrap-skeleton.git blog 里面的参数blog其实就是接下来你的项目文件名，这里我就取了yfdkldmm-blog。 之后再按照下面3行依次每行执行\ncd yfdkldmm-blog rm -rf .git git init -b main 一定要小心rm -rf .git这行命令，请确保cd到对应目录下才开始输入 接下来就可以看到一大串文件\n更改配置并第一次提交 之后是更改go.mod文件内容，第一行的\nmodule github.com/razonyang/hugo-theme-bootstrap-skeleton 将其地址改为自己的仓库地址\nmodule github.com/4AleRoL4/4AleRoL4.github.io 更改完以后，就可以提交到远程仓库，查看是否部署成功 但在此之前，请\nhugo 一下，输入这一行代码以后，会将你的网页打包成静态网页，并放入public文件夹中。每次在部署前，在本地修改了内容，就记得hugo一下之后，再开始上传，后面就不会再赘述了。 另外提一下，hugo以后，同样可以进入public文件夹中查看网页，只不过这时要用到别的东西，之后再说。 继续部署的配置吧。 首先，需要设置远程仓库连接（请将我的链接替换为自己仓库的链接，就在code→绿色的code里面）\ngit remote add origin https://github.com/4AleRoL4/4AleRoL4.github.io.git 建立好连接以后，请一定记住，在提交远程仓库前，要先pull一下，与远程仓库同步一下，特别是创建仓库的时候设置了默认md文档的，如果不执行pull，就会无法继续下一步。首先，是需要本地提交一下\ngit add . git commit -m \u0026#34;First commit\u0026#34; 接着就是pull\ngit pull --rebase origin main 此时，你打开你的README.md文档，可能会发现多了些\u0026raquo;\u0026raquo;\u0026raquo;\u0026gt;，\u0026laquo;\u0026laquo;\u0026laquo;这样的符号，如果了解git的，就知道这是需要处理的分支冲突，解决办法就是，将这些非常明显的字符全部删掉，并且留下你希望上传的内容，保存，接着继续输入以下内容\ngit rebase --continue 之后，可能还需要再本地提交一次，最后是输入\ngit push origin main 运行成功，刷新自己的github仓库，就会看到有很多东西上传上来了。 但是上面的部分，我不确定是否真的需要，因为我初次使用的时候，是用到了，但我没截图。当我再次更改README.md文件，并且提交上去时，却没有这部分步骤，改好文档，commit提交，pull下来直接push就完了，所以给不了什么具体截图\n总之，要是有问题，尝试自己解决一下吧 最后，提交上去以后，回到github仓库，setting→Pages→Build and deployment→Source这里，应该使用默认的Deploy from a branch，同时在下面Branch，选择gh-pages，后面一个文件夹选/(root)，最后save一下，如下图\n之后，网站应该就会自主部署了，详细信息可在Action里面查看\n输入自己的域名，我的就是\u0026quot;4AleRoL4.github.io\u0026quot;，就可以访问了（只不过界面可能\u0026hellip;\u0026hellip;不尽人意）\n正确加载主题 如果点我的页面，和你自己的界面的话，会有非常大的差距，这是因为并没有完全配置好。在入门模板里面也还有着后续的操作需要去完成。 会出现大量空白，并且排布很乱的情况，这就是因为主题并没有成功加载到网页上，还需要在本地执行\nnpm i hugo mod get github.com/razonyang/hugo-theme-bootstrap@master hugo mod npm pack npm update git add go.mod go.sum package.json package-lock.json git commit -m \u0026#39;Update the theme\u0026#39; 这一长串的代码（小提醒，go.mod里面的东西记得改哦），除此之外，你还需要去网站根目录下的/.github/workflows/gh-pages.yml的文件里面，大概第42行左右那里\n- name: Build run: hugo --minify --gc --enableGitInfo -b https://projects.razonyang.com/hugo-theme-bootstrap-skeleton/ 在这一长串，将包含-b以及后面的东西全删了（原教程只说了-b，但我没找到，踩了一次坑，实际就是，网页还是那种缺东西的样子）。 总之，这些都搞好了，那么再一次提交到远程库上面，等运行完以后，再次点击，那么网站主题应该就彻底弄好了。 而这也说明，你的网站也就搭建成功！（不过只是有个骨架，核心的还得慢慢搞呢）\n额外内容 关于gh-pages.yml文件的一些内容说明 这个其实是一位群友给我小编辑一下的图（而他也是从头指导我搭建好这个网站的人，感激之情无以表达），下面就放一放那个图\n域名配置 真的不会觉得\u0026quot;username.github.io\u0026quot;这个域名作为自己专属的blog域名，很俗吗？ 那肯定必须得改！ 首先第一步就是，得去买一个域名，自己百度一下阿里云或者腾讯云的域名购买，去那边买一个就好，或者有能力的可以选择\u0026quot;www.name.com\u0026quot;去购买。我是腾讯云买的。 其次对域名小说明一下，对于我个人的blog域名yfd.kldmm.icu这个域名，要买的其实是kldmm.icu，而yfd.是子域名，自己设置就好。然后价格，最通用的.com域名一直都非常贵，而别的不流通的.icu啊.top什么的，就会很便宜（另外，真的有人会用中文域名嘛？），其次跟你要买的长度有关，yfdkldmm.net和kldmm.net两个也是一个价格差，总之自己挑选吧 购买好以后，需要进入域名配置，大概就是这个界面\n点击你自己购买的域名，进入\n我这边已经配置过了，正常情况是空的，需要自己点添加记录开始添加。图我就不放了，只需要记住：\n主机记录写@代表空子域名，填写什么就是什么的子域名。 我这里是使用CNAME方式，记录值就是你的\u0026quot;username.github.io\u0026quot;，都设置好了，这边就结束了 接着再回到github页面，在你网站的根目录下，创建一个名为CNAME的文件，内容为你的域名\n最后，再去setting→pages设置你的自定义域名就可以了。参考来源，不过这里面的方法是说记录值为IP，我本人尝试以后是报错，说请使用CNAME方式跳转\n关于hugo以后的预览 执行hugo打包以后，所有的东西会被打包进public文件夹中，在里面你可以找到非常多的html文件，但是你无法直接打开，直接打开的话就会是各种奇奇怪怪的页面。这个时候就需要用到http-server。 首先可以通过node.js安装\nnpm install --global http-server 安装好以后，就可以使用\nhttp-server [path] [option] 来预览打包以后的网页。path填写你的public文件夹路径，要么是绝对路径，要么是相对路径，以目前就在网站根目录下为例，path就是./public。option是可选，在这个链接有详细说明，不过一般空着就行\n另外就是\u0026hellip;\u0026hellip;我本人的电脑似乎无法成功安装，显示安装成功后依旧无法使用。幸好还有免安装的办法\nnpx http-server [path] [option] 通过这个方法，可以直接运行，不需要安装，我也是通过这个才实现了预览。\n运行出来，可以看到端口号是8080，那么通过localhost:8080就可以访问了。\n一些小问题 本来没有这个板块的，但是某一天我起来突然发现hugo server报错了，那就顺便记录一下。\n错误提示就在上面，Error：Cannot find module autoprefixer 上网一查，或者仔细看那些给出的目录下，大致也能猜到autoprefixer是一个nodejs里面的模块。之前没有出问题，但是突然冒出来可能是因为\u0026hellip;\u0026hellip;我改了npm的global模块位置。 解决办法也很简单\nnpm install autoprefixer npm install autoprefixer -g 这两行都运行一下，就能解决了\n总结 至此，作为一个单纯的网站搭建以及部署，就完成了。虽然这个网站的东西基本都不是你自己的，但至少，域名是我们自己的，已经可以给朋友炫耀一下下了。然后下一次blog，就是关于如何将这个网站，彻底变为自己的东西的相关资料\n","date":"2023年4月27日","img":"https://4AleRoL4.github.io/images/blog%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%97%AE%E9%A2%98/index.jpg","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/blog/2023/04/blog%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%97%AE%E9%A2%98/","series":[{"title":"blog","url":"/series/blog/"}],"smallImg":"","tags":[{"title":"Hugo","url":"/tags/hugo/"}],"timestamp":1682558400,"title":"Blog搭建及问题"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Arch Linux.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/installation/linux/archlinux/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Arch Linux","url":"/tags/arch-linux/"}],"timestamp":1662475343,"title":"Install on Arch Linux"},{"authors":[],"categories":[],"content":"A fast, responsive and feature-rich Hugo theme for blog and documentations site.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/introduction/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[],"timestamp":1662475343,"title":"Introduction"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Ubuntu.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/installation/linux/ubuntu/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Ubuntu","url":"/tags/ubuntu/"}],"timestamp":1662475343,"title":"Install on Ubuntu"},{"authors":[],"categories":[{"title":"Installation","url":"/categories/installation/"}],"content":"This guide show you how to install on Windows.\n","date":"2022年9月6日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/docs/installation/windows/","series":[{"title":"Guide","url":"/series/guide/"}],"smallImg":"","tags":[{"title":"Windows","url":"/tags/windows/"}],"timestamp":1662475343,"title":"Install on Windows"},{"authors":[],"categories":[],"content":"会写代码，btsrk，会做ff14的midi，会玩一丢丢类型非常杂的游戏，但不喜欢一些主流游戏，仅此而已 顺便丢个midishow链接\n","date":"2019年2月28日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/about/","series":[],"smallImg":"","tags":[],"timestamp":1551312000,"title":"关于我"},{"authors":[],"categories":[],"content":"","date":"1年1月1日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"},{"authors":[],"categories":[],"content":"","date":"1年1月1日","img":"","lang":"zh-hans","langName":"简体中文","largeImg":"","permalink":"/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"联系我们"}]
